openapi: '3.0.3'
info:
  title: opensesame-back API
  version: '0.1.0'
  description: TODO
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: users
    description: Operations about user
paths:
  /users/signup:
    post:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Create user
      description: This can only be done by logged in admins
      operationId: createUser
      requestBody:
        description: New user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User created
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          name:
                            type: string
                            example: John
                          email:
                            type: string
                            example: john@mydomain.com
                          role:
                            type: string
                            example: user
                          permissions:
                            type: array
                            items:
                              type: string
                              example: role1
                          password:
                            type: string
                            example: n5LAnr1jM.DyKcV8
                          passwordChangedAt:
                            type: string
                            example: 2024-07-08T17:04:33.270Z
                          _id:
                            type: string
                            example: c1c22b5556321
                          __v:
                            type: integer
                            example: 0
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid input data
                  errors:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          type:
                            type: string
                            example: field
                          value:
                            type: string
                            example: user@
                          msg:
                            type: string
                            example: Email must be valid
                          path:
                            type: string
                            example: email
                          location:
                            type: string
                            example: body
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /users/login:
    post:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Login user
      parameters:
        - in: header
          name: authorizationType
          schema:
            type: string
            example: bearer
          required: false
          description: If "bearer" is provided, the token will be sent in the Authorization header. If not provided, the token will be stored in a cookie.
      description: User login endpoint
      operationId: loginUser
      requestBody:
        description: User login object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogIn'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginObject'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid credentials
  /users/logout:
    delete:
      tags:
        - users
      summary: Logout user
      description: Destroys user session. No parameters as token is retrieved from cookies.
      operationId: logoutUser
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Successfully logged out
  /users/changePassword:
    post:
      description: Change user password
      summary: Change user password
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      operationId: changePassword
      parameters:
        - in: header
          name: authorizationType
          schema:
            type: string
            example: bearer
          required: false
          description: If "bearer" is provided, the token will be sent in the Authorization header. If not provided, the token will be stored in a cookie.
      requestBody:
        description: Change password object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginObject'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Passwords are not the same
        401:
          description: Not logged in or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /users/changeUserPassword:
    post:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Change user password
      description: Change the password of another user. This can only be done by admins.
      operationId: changeUserPassword
      requestBody:
        description: Change user password object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password updated
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Passwords are not the same
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /users/roles:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Get all roles of a user
      description: Get all roles of a user
      operationId: getRoles
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Roles retrieved
                  data:
                    type: object
                    properties:
                      role:
                        type: string
                        example: user
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: Roles not found for that user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Role not found for that user
    put:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Update user roles
      description: Update user roles
      operationId: updateRoles
      requestBody:
        description: Update roles object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@user.com
                role:
                  type: string
                  example: admin
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginObject'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid input data
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /users/permissions:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Get all permissions of a user
      description: Get all permissions of a user
      operationId: getPermissions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Permissions retrieved
                  data:
                    type: object
                    properties:
                      permissions:
                        type: array
                        items:
                          type: string
                          example: role1
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    put:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Update user permissions
      description: Update user permissions
      operationId: updatePermissions
      requestBody:
        description: Update permissions object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@user.com
                permissions:
                  type: array
                  items:
                    type: string
                    example: role1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginObject'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid input data
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /users/delete:
    delete:
      tags:
        - users
      security:
        - bearerAuth: []
        - cookieAuth: []
      summary: Delete user
      description: This can only be done by logged in admins
      operationId: deleteUser
      requestBody:
        description: Delete user object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@user.com
      responses:
        204:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User removed
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotLoggedIn'
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

components:
  schemas:
    NotLoggedIn:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: You are not logged in! Please log in to get access.
    Unauthorized:
      type: object
      properties:
        status:
          type: string
          example: fail
        message:
          type: string
          example: You do not have permission to perform this action
    SignUp:
      type: object
      properties:
        name:
          type: string
          example: John
        email:
          type: string
          example: john@mydomain.com
        role:
          type: string
          example: user
        password:
          type: string
          example: superSecurePassword
        passwordConfirm:
          type: string
          example: superSecurePassword
    LogIn:
      type: object
      properties:
        email:
          type: string
          example: user@user.com
        password:
          type: string
          example: superSecurePassword
    ChangePassword:
      type: object
      properties:
        currentPassword:
          type: string
          example: superSecurePassword
        newPassword:
          type: string
          example: superSecurePassword2
        newPasswordConfirm:
          type: string
          example: superSecurePassword2
    LoginObject:
      type: object
      properties:
        status:
          type: string
          example: success
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZjI2MzQ2ZjIzYzQzNzIzYzQzNzIzYzQiLCJpYXQiOjE1OTk4NzQwNzJ9.7
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  example: 5f26346f23c43723c43723c4
                name:
                  type: string
                  example: John
                email:
                  type: string
                  example: user@user.com
                role:
                  type: string
                  example: user
                permissions:
                  type: array
                  items:
                    type: string
                    example: role1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt
